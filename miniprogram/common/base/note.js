"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = require("../../utils/isEmpty");
var Note = (function () {
    function Note() {
        this.data = {};
    }
    Note.prototype.get = function (scope) {
        var _this = this;
        if (scope)
            return this.data[scope] ? this.data[scope].value : undefined;
        var res = {};
        Object.keys(this.data).map(function (key) {
            res[key] = _this.data[key].value;
        });
    };
    Note.prototype.emit = function (scope, value) {
        var self = this;
        return new Promise(function (resolve, reject) {
            try {
                if (!self.data[scope])
                    self.data[scope] = { value: value, watch: {} };
                else {
                    var page_1 = getCurrentPages().pop();
                    Object.keys(self.data[scope].watch[page_1.__wxWebviewId__]).forEach(function (nodeId) {
                        self.data[scope].watch[page_1.__wxWebviewId__][nodeId].forEach(function (fn) {
                            fn(value, self.data[scope].value);
                            self.data[scope].value = value;
                        });
                    });
                }
                resolve(self.data[scope].value, value);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    Note.prototype.on = function (scope, fn, ctx) {
        var _this = this;
        var type = Object.prototype.toString.call(scope);
        if (type === "[object String]")
            return this._on(scope, fn, ctx);
        if (type === "[object Array]") {
            return scope.map(function (sc) { return _this._on(sc, fn, ctx); });
        }
    };
    Note.prototype.off = function (scope, ctx) {
        var _this = this;
        var type = Object.prototype.toString.call(scope);
        if (type === "[object String]")
            this._off(scope, ctx);
        if (type === "[object Array]") {
            scope.map(function (sc) { return _this._off(sc, ctx); });
        }
    };
    Note.prototype._on = function (scope, fn, ctx) {
        if (!this.data[scope])
            this.data[scope] = { value: null, watch: {} };
        if (!this.data[scope].watch[ctx.__wxWebviewId__])
            this.data[scope].watch[ctx.__wxWebviewId__] = {};
        if (!this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__])
            this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__] = [];
        this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__].push(fn.bind(ctx));
        return this.data[scope].value;
    };
    Note.prototype._off = function (scope, ctx) {
        try {
            delete this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__];
            if (isEmpty_1.isEmpty(this.data[scope].watch))
                delete this.data[scope].watch;
            if (isEmpty_1.isEmpty(this.data[scope].watch[ctx.__wxWebviewId__]))
                delete this.data[scope].watch[ctx.__wxWebviewId__];
        }
        catch (err) { }
    };
    return Note;
}());
exports.default = new Note();
//# sourceMappingURL=data:application/json;base64,