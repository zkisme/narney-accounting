"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = require("../../utils/isEmpty");
var Note = (function () {
    function Note() {
        this.data = {};
    }
    Note.prototype.emit = function (scope, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var page_1 = getCurrentPages().pop();
                Object.keys(_this.data[scope].watch[page_1.__wxWebviewId__]).forEach(function (nodeId) {
                    _this.data[scope].watch[page_1.__wxWebviewId__][nodeId].forEach(function (fn) {
                        fn(value, _this.data[scope].value);
                        _this.data[scope].value = value;
                    });
                });
                resolve(_this.data[scope].value, value);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    Note.prototype.on = function (scope, fn, ctx) {
        var _this = this;
        var type = Object.prototype.toString.call(scope);
        if (type === '[object String]')
            return this._on(scope, fn, ctx);
        if (type === '[object Array]') {
            return scope.map(function (sc) { return _this._on(sc, fn, ctx); });
        }
    };
    Note.prototype.off = function (scope, ctx) {
        var _this = this;
        var type = Object.prototype.toString.call(scope);
        if (type === '[object String]')
            this._off(scope, ctx);
        if (type === '[object Array]') {
            scope.map(function (sc) { return _this._off(sc, ctx); });
        }
    };
    Note.prototype._on = function (scope, fn, ctx) {
        if (!this.data[scope])
            this.data[scope] = { value: null, watch: {} };
        if (!this.data[scope].watch[ctx.__wxWebviewId__])
            this.data[scope].watch[ctx.__wxWebviewId__] = {};
        if (!this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__])
            this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__] = [];
        this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__].push(fn.bind(ctx));
        return this.data[scope].value;
    };
    Note.prototype._off = function (scope, ctx) {
        try {
            delete this.data[scope].watch[ctx.__wxWebviewId__][ctx.__wxExparserNodeId__];
            if (isEmpty_1.isEmpty(this.data[scope].watch))
                delete this.data[scope].watch;
            if (isEmpty_1.isEmpty(this.data[scope].watch[ctx.__wxWebviewId__]))
                delete this.data[scope].watch[ctx.__wxWebviewId__];
        }
        catch (err) { }
    };
    return Note;
}());
exports.default = new Note();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBOEM7QUFjOUM7SUFFRTtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFDRCxtQkFBSSxHQUFKLFVBQUssS0FBYSxFQUFFLEtBQVU7UUFBOUIsaUJBZUM7UUFkQyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBVyxFQUFFLE1BQVU7WUFDekMsSUFBSTtnQkFDRixJQUFNLE1BQUksR0FBTyxlQUFlLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO29CQUN0RSxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTt3QkFDN0QsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO3dCQUNqQyxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7b0JBQ2hDLENBQUMsQ0FBQyxDQUFBO2dCQUNKLENBQUMsQ0FBQyxDQUFBO2dCQUNGLE9BQU8sQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTthQUN2QztZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFD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Q0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUE7WUFDbkUsSUFBSSxpQkFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFBRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUM5RztRQUFDLE9BQU0sR0FBRyxFQUFFLEdBQUU7SUFFakIsQ0FBQztJQUNILFdBQUM7QUFBRCxDQUFDLEFBcERELElBb0RDO0FBR0Qsa0JBQWUsSUFBSSxJQUFJLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHkgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaXNFbXB0eVwiO1xyXG5cclxudHlwZSBGbiA9ICguLi5hcmdzOmFueSkgPT4gYW55O1xyXG5pbnRlcmZhY2UgTm90ZURhdGEge1xyXG4gIFtzY29wZU5hbWU6IHN0cmluZ106IHtcclxuICAgIHZhbHVlOiBhbnksXHJcbiAgICB3YXRjaDoge1xyXG4gICAgICBbd2ViaWQ6IHN0cmluZ106IHtcclxuICAgICAgICBbbm9kZWlkOiBzdHJpbmddIDogKG5ldmVyIHwgRm4pW11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgTm90ZSB7XHJcbiAgZGF0YTogTm90ZURhdGE7XHJcbiAgY29uc3RydWN0b3IoKXtcclxuICAgIHRoaXMuZGF0YSA9IHt9XHJcbiAgfVxyXG4gIGVtaXQoc2NvcGU6IHN0cmluZywgdmFsdWU6IGFueSl7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6YW55LCByZWplY3Q6YW55KSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFnZTphbnkgPSBnZXRDdXJyZW50UGFnZXMoKS5wb3AoKVxyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZGF0YVtzY29wZV0ud2F0Y2hbcGFnZS5fX3d4V2Vidmlld0lkX19dKS5mb3JFYWNoKG5vZGVJZCA9PiB7XHJcbiAgICAgICAgICB0aGlzLmRhdGFbc2NvcGVdLndhdGNoW3BhZ2UuX193eFdlYnZpZXdJZF9fXVtub2RlSWRdLmZvckVhY2goZm4gPT4ge1xyXG4gICAgICAgICAgICBmbih2YWx1ZSwgdGhpcy5kYXRhW3Njb3BlXS52YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5kYXRhW3Njb3BlXS52YWx1ZSA9IHZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmVzb2x2ZSh0aGlzLmRhdGFbc2NvcGVdLnZhbHVlLCB2YWx1ZSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIG9uKHNjb3BlOnN0cmluZyB8IChzdHJpbmdbXSksIGZuOiBhbnksIGN0eDogV3hDb21wb25lbnQgfCBQYWdlLlBhZ2VJbnN0YW5jZSk6YW55e1xyXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzY29wZSlcclxuICAgIGlmKHR5cGUgPT09ICdbb2JqZWN0IFN0cmluZ10nKSByZXR1cm4gdGhpcy5fb24oc2NvcGUgYXMgc3RyaW5nLCBmbiwgY3R4KVxyXG4gICAgaWYodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xyXG4gICAgICByZXR1cm4gKHNjb3BlIGFzIHN0cmluZ1tdKS5tYXAoKHNjOnN0cmluZykgPT4gdGhpcy5fb24oc2MsIGZuLCBjdHgpKVxyXG4gICAgfVxyXG4gIH1cclxuICBvZmYoc2NvcGU6c3RyaW5nIHwgc3RyaW5nW10sIGN0eDogV3hDb21wb25lbnQgfCBQYWdlLlBhZ2VJbnN0YW5jZSk6IHZvaWR7XHJcbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNjb3BlKVxyXG4gICAgaWYodHlwZSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpIHRoaXMuX29mZihzY29wZSBhcyBzdHJpbmcsIGN0eClcclxuICAgIGlmKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcclxuICAgICAgKHNjb3BlIGFzIHN0cmluZ1tdKS5tYXAoKHNjOnN0cmluZykgPT4gdGhpcy5fb2ZmKHNjLCBjdHgpKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uKHNjb3BlOnN0cmluZywgZm46IEZuLCBjdHg6IFd4Q29tcG9uZW50IHwgUGFnZS5QYWdlSW5zdGFuY2UpOmFueXtcclxuICAgIGlmKCF0aGlzLmRhdGFbc2NvcGVdKSB0aGlzLmRhdGFbc2NvcGVdID0ge3ZhbHVlOiBudWxsLCB3YXRjaDp7fX1cclxuICAgIGlmKCF0aGlzLmRhdGFbc2NvcGVdLndhdGNoW2N0eC5fX3d4V2Vidmlld0lkX19dKSB0aGlzLmRhdGFbc2NvcGVdLndhdGNoW2N0eC5fX3d4V2Vidmlld0lkX19dID0ge31cclxuICAgIGlmKCF0aGlzLmRhdGFbc2NvcGVdLndhdGNoW2N0eC5fX3d4V2Vidmlld0lkX19dW2N0eC5fX3d4RXhwYXJzZXJOb2RlSWRfX10pIHRoaXMuZGF0YVtzY29wZV0ud2F0Y2hbY3R4Ll9fd3hXZWJ2aWV3SWRfX11bY3R4Ll9fd3hFeHBhcnNlck5vZGVJZF9fXSA9IFtdXHJcbiAgICB0aGlzLmRhdGFbc2NvcGVdLndhdGNoW2N0eC5fX3d4V2Vidmlld0lkX19dW2N0eC5fX3d4RXhwYXJzZXJOb2RlSWRfX10ucHVzaChmbi5iaW5kKGN0eCkpXHJcbiAgICByZXR1cm4gdGhpcy5kYXRhW3Njb3BlXS52YWx1ZVxyXG4gIH1cclxuXHJcbiAgX29mZihzY29wZTpzdHJpbmcsIGN0eDogV3hDb21wb25lbnQgfCBQYWdlLlBhZ2VJbnN0YW5jZSl7XHJcbiAgICB0cnkge1xyXG4gICAgICBkZWxldGUgdGhpcy5kYXRhW3Njb3BlXS53YXRjaFtjdHguX193eFdlYnZpZXdJZF9fXVtjdHguX193eEV4cGFyc2VyTm9kZUlkX19dXHJcbiAgICAgIGlmKCBpc0VtcHR5KHRoaXMuZGF0YVtzY29wZV0ud2F0Y2gpICkgZGVsZXRlIHRoaXMuZGF0YVtzY29wZV0ud2F0Y2hcclxuICAgICAgaWYoIGlzRW1wdHkodGhpcy5kYXRhW3Njb3BlXS53YXRjaFtjdHguX193eFdlYnZpZXdJZF9fXSkgKSBkZWxldGUgdGhpcy5kYXRhW3Njb3BlXS53YXRjaFtjdHguX193eFdlYnZpZXdJZF9fXVxyXG4gICAgfSBjYXRjaChlcnIpIHt9XHJcbiAgICBcclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTm90ZSgpIl19